using UnityEngine.InputSystem;

/// <summary>
/// How you access Unity's Input System. You don't want to touch Input Master,
/// that's a class generated by Unity and if you go messing with it things might break.
/// This class gives you control over how to interact with the input system.
/// </summary>
public class InputManager : Singleton<InputManager>
{
    // We'll need a reference to an InputMaster - this is the class generated for us by Unity.
    private InputMaster inputMaster;

    /// <summary>
    /// Delegates are template functions.
    /// They allow you to pass reference to a function.
    /// </summary>
    /// <param name="direction"></param>
    public delegate void Move(float direction);
    /// <summary>
    /// Events are a list of functions.
    /// When something happens - in this case movement - everyone who is SUBSCRIBED
    /// to this event will be alerted (i.e. their function will be called).
    /// </summary>
    public event Move OnMove;

    /*
     * Delegates and Events are advanced C#, but they are incredibly useful for situations
     * like providing input. I'll make some more detailed notes going over them and post in
     * #resources.
     */

    public delegate void Jump();
    public event Jump OnJump;

    /// <summary>
    /// Remember, Awake is good for getting components attached to yourself and for 
    /// instantiating variables.
    /// 
    /// Start is good for communicating with other GameObjects.
    /// </summary>
    private void Awake()
    {
        // Instantiate a new InputMaster
        inputMaster = new InputMaster();
    }

    /*
     * OnEnable and OnDisable:
     * When a Scene starts, Unity will go through all your objects and ENABLE their components,
     * when it does so it will call OnEnable if you've written it.
     * 
     * When a GameObject is deactivated or destroyed, Unity will call OnDisable.
     * 
     * Usually, you don't need to worry about these functions. We need them here to enable our
     * inputMaster and manage our event subscriptions.
     */

    private void OnEnable()
    {
        // Enable inputMaster and subscribe our functions to input events.
        inputMaster.Enable();

        // These are Arrow Functions, also advanced C#, also very handy.
        // I'll try to post notes on them in #resources as well.
        inputMaster.Base.Move.performed += ctx => PerformMove(ctx);
        inputMaster.Base.Jump.performed += ctx => PerformJump(ctx);
    }

    private void OnDisable()
    {
        // Unsubscribe from input events and 
        inputMaster.Base.Move.performed -= ctx => PerformMove(ctx);
        inputMaster.Base.Jump.performed -= ctx => PerformJump(ctx);
        inputMaster.Disable();
    }

    /// <summary>
    /// Check if there are movement subscribers and alert them.
    /// </summary>
    /// <param name="ctx">
    /// The context of the input. In this case it will be either 1 or -1, implying right or left.
    /// </param>
    private void PerformMove(InputAction.CallbackContext ctx)
    {
        // If the event is null, there are no subscribers.
        if(OnMove != null)
        {
            OnMove(ctx.ReadValue<float>());
        }
    }

    private void PerformJump(InputAction.CallbackContext ctx)
    {
        if(OnJump != null)
        {
            OnJump();
        }
    }
}
